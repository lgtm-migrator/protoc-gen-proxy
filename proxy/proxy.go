// SPDX-FileCopyrightText: Copyright 2022 The protobuf-tools Authors
// SPDX-License-Identifier: BSD-3-Clause

// Package proxy generates RPC service proxy.
package proxy

import (
	"fmt"

	"github.com/iancoleman/strcase"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

// SupportedFeatures reports the set of supported protobuf language features.
const SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

// list of _proxy.pb.go files package dependencies.
const (
	contextPackage = protogen.GoImportPath("context")
	errorsPackage  = protogen.GoImportPath("errors")
	netPackage     = protogen.GoImportPath("net")
	grpcPackage    = protogen.GoImportPath("google.golang.org/grpc")
)

// FileNameSuffix is the suffix added to files generated by deepcopy
const FileNameSuffix = "_proxy.pb.go"

// GenerateFile generates DeepCopyInto() and DeepCopy() functions for .pb.go types.
func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + FileNameSuffix
	goImportPath := file.GoImportPath

	g := gen.NewGeneratedFile(filename, goImportPath)

	g.QualifiedGoIdent(contextPackage.Ident("context"))
	g.QualifiedGoIdent(errorsPackage.Ident("errors"))
	g.QualifiedGoIdent(netPackage.Ident("net"))
	g.QualifiedGoIdent(grpcPackage.Ident("grpc"))

	g.P(`// Code generated by protoc-gen-proxy. DO NOT EDIT.`)
	g.P()
	g.P(`package `, file.GoPackageName)
	g.P()

	for _, service := range file.Services {
		serviceName := service.GoName
		lowerServiceName := strcase.ToLowerCamel(serviceName)
		serverName := lowerServiceName + "Server"

		methods := make(map[string]string)
		for _, method := range service.Methods {
			methods[method.GoName] = fmt.Sprintf(`(ctx context.Context, req *%s) (*%s, error)`, method.Input.GoIdent.GoName, method.Output.GoIdent.GoName)
		}

		g.P(`// Proxy allows to create `, serviceName, ` proxy servers.`)
		g.P(`type Proxy struct {`)
		for fn, args := range methods {
			g.P(`	`, fn, ` func`, args)
		}
		g.P(`}`)
		g.P()
		g.P(`// Serve starts serving the proxy server on the given listener with the specified options.`)
		g.P(`func (p *Proxy) Serve(l net.Listener, opts ...grpc.ServerOption) error {`)
		g.P(`	srv := grpc.NewServer(opts...)`)
		g.P(`	Register`, serviceName, `Server(srv, &`, serverName, `{proxy: p})`)
		g.P()
		g.P(`	return srv.Serve(l)`)
		g.P(`}`)
		g.P()
		g.P(`var errNotSupported = errors.New("operation not supported")`)
		g.P()
		g.P(`type `, serverName, ` struct {`)
		g.P(`	proxy *Proxy`)
		g.P(`}`)
		g.P()
		for fn, args := range methods {
			g.P(`func (s *`, serverName, `) `, fn, args, ` {`)
			g.P(`	fn := s.proxy.`, fn)
			g.P(` 	if fn == nil {`)
			g.P(` 		return nil, errNotSupported`)
			g.P(` 	}`)
			g.P()
			g.P(`return fn(ctx, req)`)
			g.P(`}`)
			g.P()
		}
	}

	return g
}
